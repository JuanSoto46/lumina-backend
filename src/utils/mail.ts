/**
 * @fileoverview Email utility module using SendGrid API for transactional emails.
 * Provides secure email sending functionality with automatic initialization and error handling.
 * @module utils/mail
 * @version 1.0.0
 * @requires @sendgrid/mail
 */

import sgMail from "@sendgrid/mail";

/**
 * Tracks initialization state of SendGrid API key.
 * Prevents multiple initialization calls for performance optimization.
 * @type {boolean}
 * @private
 */
let initialized = false;

/**
 * Ensures SendGrid API is properly initialized with API key.
 * 
 * @function ensureInit
 * @private
 * @throws {Error} When SENDGRID_API_KEY environment variable is missing
 * 
 * @description
 * Lazy initialization function that sets up SendGrid API key only when needed.
 * Uses a flag to prevent multiple initialization calls for better performance.
 * This function is called automatically by sendMail() before each email send operation.
 * 
 * @environment
 * - SENDGRID_API_KEY: Required SendGrid API key for authentication
 * 
 * @example
 * // This function is called automatically, no manual invocation needed
 * // ensureInit(); // Called internally by sendMail()
 */
function ensureInit() {
  const key = process.env.SENDGRID_API_KEY;
  if (!key) throw new Error("SENDGRID_API_KEY missing");
  if (!initialized) {
    sgMail.setApiKey(key);
    initialized = true;
  }
}

/**
 * Email configuration options for sending emails via SendGrid.
 * 
 * @typedef {Object} SendEmailOpts
 * @property {string} to - Recipient email address
 * @property {string} subject - Email subject line
 * @property {string} html - HTML content of the email body
 * @property {string} [replyTo] - Optional reply-to email address (defaults to EMAIL_FROM or REPLY_TO env var)
 * @property {string} [text] - Optional plain text version (auto-generated from HTML if not provided)
 * 
 * @description
 * Configuration object that defines all necessary parameters for sending an email.
 * The HTML content is required, but plain text will be auto-generated by stripping HTML tags
 * if not explicitly provided. Reply-to address falls back to environment variables if not specified.
 * 
 * @example
 * const emailOptions: SendEmailOpts = {
 *   to: "user@example.com",
 *   subject: "Welcome to our service",
 *   html: "<h1>Welcome!</h1><p>Thanks for joining us.</p>",
 *   replyTo: "support@company.com",
 *   text: "Welcome! Thanks for joining us."
 * };
 */
type SendEmailOpts = {
  to: string;
  subject: string;
  html: string;
  replyTo?: string;
  text?: string;
};

/**
 * Sends transactional emails using SendGrid API with comprehensive error handling.
 * 
 * @async
 * @function sendMail
 * @param {SendEmailOpts} options - Email configuration object
 * @param {string} options.to - Recipient email address
 * @param {string} options.subject - Email subject line
 * @param {string} options.html - HTML email content
 * @param {string} [options.replyTo] - Optional reply-to address
 * @param {string} [options.text] - Optional plain text content
 * @returns {Promise<boolean>} Returns true on successful email delivery
 * @throws {Error} Throws descriptive error on email delivery failure
 * 
 * @description
 * Primary email sending function that handles:
 * - Automatic SendGrid API initialization
 * - HTML to text conversion when text version not provided
 * - Comprehensive error logging with request tracing
 * - Flexible reply-to address configuration
 * - Success confirmation with delivery metadata
 * 
 * @environment
 * Required environment variables:
 * - SENDGRID_API_KEY: SendGrid API authentication key
 * - EMAIL_FROM: Default sender email address
 * - REPLY_TO: (Optional) Default reply-to email address
 * 
 * @security
 * - API key is loaded from environment variables only
 * - Email addresses are validated by SendGrid
 * - Request IDs are logged for audit trails
 * 
 * @example
 * // Send a welcome email
 * try {
 *   await sendMail({
 *     to: "user@example.com",
 *     subject: "Welcome to our platform",
 *     html: "<h1>Welcome!</h1><p>We're glad you joined us.</p>",
 *     replyTo: "support@company.com"
 *   });
 *   console.log("Email sent successfully");
 * } catch (error) {
 *   console.error("Failed to send email:", error.message);
 * }
 * 
 * @example  
 * // Send password reset email
 * await sendMail({
 *   to: user.email,
 *   subject: "Reset your password",
 *   html: `<p>Click <a href="${resetUrl}">here</a> to reset your password.</p>`,
 *   text: `Reset your password: ${resetUrl}`
 * });
 */
export async function sendMail({ to, subject, html, replyTo, text }: SendEmailOpts) {
  ensureInit();
  const from = process.env.EMAIL_FROM!;
  try {
    const [resp] = await sgMail.send({
      to,
      from,
      subject,
      html,
      text: text || html.replace(/<[^>]+>/g, ""),
      replyTo: replyTo || process.env.REPLY_TO || from,
      // mailSettings: { sandboxMode: { enable: false } }, // por si tocaste esto en dashboard
    });
    // Log mínimo para trazabilidad
    console.log("[sendMail] ok", { to, status: resp.statusCode, requestId: resp.headers["x-message-id"] || resp.headers["x-request-id"] });
    return true;
  } catch (err: any) {
    // Saca TODO lo útil
    const status = err?.code || err?.response?.statusCode;
    const body = err?.response?.body;
    console.error("[sendMail] fail", { to, status, body });
    throw new Error(body?.errors?.[0]?.message || body?.message || err?.message || "SendMail failed");
  }
}
